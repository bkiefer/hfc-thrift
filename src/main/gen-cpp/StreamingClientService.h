/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef StreamingClientService_H
#define StreamingClientService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "streamingclient_types.h"

namespace hfc_stream {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class StreamingClientServiceIf {
 public:
  virtual ~StreamingClientServiceIf() {}
  virtual void compute(const std::set<std::string> & affectedUsers) = 0;
};

class StreamingClientServiceIfFactory {
 public:
  typedef StreamingClientServiceIf Handler;

  virtual ~StreamingClientServiceIfFactory() {}

  virtual StreamingClientServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(StreamingClientServiceIf* /* handler */) = 0;
  };

class StreamingClientServiceIfSingletonFactory : virtual public StreamingClientServiceIfFactory {
 public:
  StreamingClientServiceIfSingletonFactory(const ::std::shared_ptr<StreamingClientServiceIf>& iface) : iface_(iface) {}
  virtual ~StreamingClientServiceIfSingletonFactory() {}

  virtual StreamingClientServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(StreamingClientServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<StreamingClientServiceIf> iface_;
};

class StreamingClientServiceNull : virtual public StreamingClientServiceIf {
 public:
  virtual ~StreamingClientServiceNull() {}
  void compute(const std::set<std::string> & /* affectedUsers */) override {
    return;
  }
};

typedef struct _StreamingClientService_compute_args__isset {
  _StreamingClientService_compute_args__isset() : affectedUsers(false) {}
  bool affectedUsers :1;
} _StreamingClientService_compute_args__isset;

class StreamingClientService_compute_args {
 public:

  StreamingClientService_compute_args(const StreamingClientService_compute_args&);
  StreamingClientService_compute_args& operator=(const StreamingClientService_compute_args&);
  StreamingClientService_compute_args() noexcept {
  }

  virtual ~StreamingClientService_compute_args() noexcept;
  std::set<std::string>  affectedUsers;

  _StreamingClientService_compute_args__isset __isset;

  void __set_affectedUsers(const std::set<std::string> & val);

  bool operator == (const StreamingClientService_compute_args & rhs) const
  {
    if (!(affectedUsers == rhs.affectedUsers))
      return false;
    return true;
  }
  bool operator != (const StreamingClientService_compute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StreamingClientService_compute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StreamingClientService_compute_pargs {
 public:


  virtual ~StreamingClientService_compute_pargs() noexcept;
  const std::set<std::string> * affectedUsers;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StreamingClientService_compute_result {
 public:

  StreamingClientService_compute_result(const StreamingClientService_compute_result&) noexcept;
  StreamingClientService_compute_result& operator=(const StreamingClientService_compute_result&) noexcept;
  StreamingClientService_compute_result() noexcept {
  }

  virtual ~StreamingClientService_compute_result() noexcept;

  bool operator == (const StreamingClientService_compute_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StreamingClientService_compute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StreamingClientService_compute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StreamingClientService_compute_presult {
 public:


  virtual ~StreamingClientService_compute_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class StreamingClientServiceClient : virtual public StreamingClientServiceIf {
 public:
  StreamingClientServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  StreamingClientServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void compute(const std::set<std::string> & affectedUsers) override;
  void send_compute(const std::set<std::string> & affectedUsers);
  void recv_compute();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class StreamingClientServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<StreamingClientServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (StreamingClientServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_compute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  StreamingClientServiceProcessor(::std::shared_ptr<StreamingClientServiceIf> iface) :
    iface_(iface) {
    processMap_["compute"] = &StreamingClientServiceProcessor::process_compute;
  }

  virtual ~StreamingClientServiceProcessor() {}
};

class StreamingClientServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  StreamingClientServiceProcessorFactory(const ::std::shared_ptr< StreamingClientServiceIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< StreamingClientServiceIfFactory > handlerFactory_;
};

class StreamingClientServiceMultiface : virtual public StreamingClientServiceIf {
 public:
  StreamingClientServiceMultiface(std::vector<std::shared_ptr<StreamingClientServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~StreamingClientServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<StreamingClientServiceIf> > ifaces_;
  StreamingClientServiceMultiface() {}
  void add(::std::shared_ptr<StreamingClientServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void compute(const std::set<std::string> & affectedUsers) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->compute(affectedUsers);
    }
    ifaces_[i]->compute(affectedUsers);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class StreamingClientServiceConcurrentClient : virtual public StreamingClientServiceIf {
 public:
  StreamingClientServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  StreamingClientServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void compute(const std::set<std::string> & affectedUsers) override;
  int32_t send_compute(const std::set<std::string> & affectedUsers);
  void recv_compute(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
