/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HfcDbService_H
#define HfcDbService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "hfc_db_types.h"

namespace hfc_db {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class HfcDbServiceIf {
 public:
  virtual ~HfcDbServiceIf() {}
  virtual int32_t ping() = 0;
  virtual bool addNamespace(const std::string& shortForm, const std::string& longForm) = 0;
  virtual int32_t insertPlain(const Table& t) = 0;
  virtual void selectQuery(QueryResult& _return, const std::string& query) = 0;
  virtual void query(std::string& _return, const std::string& query) = 0;
  virtual bool askQuery(const std::string& query) = 0;
  virtual int32_t insert(const Table& t) = 0;
  virtual int32_t insertTimed(const Table& t, const int64_t timestamp) = 0;
  virtual void getMultiValue(std::set<std::string> & _return, const std::string& uri, const std::string& property) = 0;
  virtual int32_t addToMultiValue(const std::string& uri, const std::string& property, const std::string& value) = 0;
  virtual int32_t removeFromMultiValue(const std::string& uri, const std::string& property, const std::string& value) = 0;
  virtual int32_t setMultiValue(const std::string& uri, const std::string& property, const std::set<std::string> & value) = 0;
  virtual void getNewId(std::string& _return, const std::string& nameSpace, const std::string& type) = 0;
  virtual int32_t setValue(const std::string& uri, const std::string& predicate, const std::string& value) = 0;
  virtual void getValue(std::string& _return, const std::string& uri, const std::string& predicate) = 0;
  virtual void getAllProps(std::map<std::string, PropInfo> & _return, const std::string& classuri) = 0;
  virtual void getClassOf(std::string& _return, const std::string& uri) = 0;
};

class HfcDbServiceIfFactory {
 public:
  typedef HfcDbServiceIf Handler;

  virtual ~HfcDbServiceIfFactory() {}

  virtual HfcDbServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(HfcDbServiceIf* /* handler */) = 0;
  };

class HfcDbServiceIfSingletonFactory : virtual public HfcDbServiceIfFactory {
 public:
  HfcDbServiceIfSingletonFactory(const ::std::shared_ptr<HfcDbServiceIf>& iface) : iface_(iface) {}
  virtual ~HfcDbServiceIfSingletonFactory() {}

  virtual HfcDbServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(HfcDbServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<HfcDbServiceIf> iface_;
};

class HfcDbServiceNull : virtual public HfcDbServiceIf {
 public:
  virtual ~HfcDbServiceNull() {}
  int32_t ping() override {
    int32_t _return = 0;
    return _return;
  }
  bool addNamespace(const std::string& /* shortForm */, const std::string& /* longForm */) override {
    bool _return = false;
    return _return;
  }
  int32_t insertPlain(const Table& /* t */) override {
    int32_t _return = 0;
    return _return;
  }
  void selectQuery(QueryResult& /* _return */, const std::string& /* query */) override {
    return;
  }
  void query(std::string& /* _return */, const std::string& /* query */) override {
    return;
  }
  bool askQuery(const std::string& /* query */) override {
    bool _return = false;
    return _return;
  }
  int32_t insert(const Table& /* t */) override {
    int32_t _return = 0;
    return _return;
  }
  int32_t insertTimed(const Table& /* t */, const int64_t /* timestamp */) override {
    int32_t _return = 0;
    return _return;
  }
  void getMultiValue(std::set<std::string> & /* _return */, const std::string& /* uri */, const std::string& /* property */) override {
    return;
  }
  int32_t addToMultiValue(const std::string& /* uri */, const std::string& /* property */, const std::string& /* value */) override {
    int32_t _return = 0;
    return _return;
  }
  int32_t removeFromMultiValue(const std::string& /* uri */, const std::string& /* property */, const std::string& /* value */) override {
    int32_t _return = 0;
    return _return;
  }
  int32_t setMultiValue(const std::string& /* uri */, const std::string& /* property */, const std::set<std::string> & /* value */) override {
    int32_t _return = 0;
    return _return;
  }
  void getNewId(std::string& /* _return */, const std::string& /* nameSpace */, const std::string& /* type */) override {
    return;
  }
  int32_t setValue(const std::string& /* uri */, const std::string& /* predicate */, const std::string& /* value */) override {
    int32_t _return = 0;
    return _return;
  }
  void getValue(std::string& /* _return */, const std::string& /* uri */, const std::string& /* predicate */) override {
    return;
  }
  void getAllProps(std::map<std::string, PropInfo> & /* _return */, const std::string& /* classuri */) override {
    return;
  }
  void getClassOf(std::string& /* _return */, const std::string& /* uri */) override {
    return;
  }
};


class HfcDbService_ping_args {
 public:

  HfcDbService_ping_args(const HfcDbService_ping_args&) noexcept;
  HfcDbService_ping_args& operator=(const HfcDbService_ping_args&) noexcept;
  HfcDbService_ping_args() noexcept {
  }

  virtual ~HfcDbService_ping_args() noexcept;

  bool operator == (const HfcDbService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HfcDbService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HfcDbService_ping_pargs {
 public:


  virtual ~HfcDbService_ping_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_ping_result__isset {
  _HfcDbService_ping_result__isset() : success(false) {}
  bool success :1;
} _HfcDbService_ping_result__isset;

class HfcDbService_ping_result {
 public:

  HfcDbService_ping_result(const HfcDbService_ping_result&) noexcept;
  HfcDbService_ping_result& operator=(const HfcDbService_ping_result&) noexcept;
  HfcDbService_ping_result() noexcept
                           : success(0) {
  }

  virtual ~HfcDbService_ping_result() noexcept;
  int32_t success;

  _HfcDbService_ping_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const HfcDbService_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_ping_presult__isset {
  _HfcDbService_ping_presult__isset() : success(false) {}
  bool success :1;
} _HfcDbService_ping_presult__isset;

class HfcDbService_ping_presult {
 public:


  virtual ~HfcDbService_ping_presult() noexcept;
  int32_t* success;

  _HfcDbService_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HfcDbService_addNamespace_args__isset {
  _HfcDbService_addNamespace_args__isset() : shortForm(false), longForm(false) {}
  bool shortForm :1;
  bool longForm :1;
} _HfcDbService_addNamespace_args__isset;

class HfcDbService_addNamespace_args {
 public:

  HfcDbService_addNamespace_args(const HfcDbService_addNamespace_args&);
  HfcDbService_addNamespace_args& operator=(const HfcDbService_addNamespace_args&);
  HfcDbService_addNamespace_args() noexcept
                                 : shortForm(),
                                   longForm() {
  }

  virtual ~HfcDbService_addNamespace_args() noexcept;
  std::string shortForm;
  std::string longForm;

  _HfcDbService_addNamespace_args__isset __isset;

  void __set_shortForm(const std::string& val);

  void __set_longForm(const std::string& val);

  bool operator == (const HfcDbService_addNamespace_args & rhs) const
  {
    if (!(shortForm == rhs.shortForm))
      return false;
    if (!(longForm == rhs.longForm))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_addNamespace_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_addNamespace_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HfcDbService_addNamespace_pargs {
 public:


  virtual ~HfcDbService_addNamespace_pargs() noexcept;
  const std::string* shortForm;
  const std::string* longForm;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_addNamespace_result__isset {
  _HfcDbService_addNamespace_result__isset() : success(false) {}
  bool success :1;
} _HfcDbService_addNamespace_result__isset;

class HfcDbService_addNamespace_result {
 public:

  HfcDbService_addNamespace_result(const HfcDbService_addNamespace_result&) noexcept;
  HfcDbService_addNamespace_result& operator=(const HfcDbService_addNamespace_result&) noexcept;
  HfcDbService_addNamespace_result() noexcept
                                   : success(0) {
  }

  virtual ~HfcDbService_addNamespace_result() noexcept;
  bool success;

  _HfcDbService_addNamespace_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const HfcDbService_addNamespace_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_addNamespace_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_addNamespace_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_addNamespace_presult__isset {
  _HfcDbService_addNamespace_presult__isset() : success(false) {}
  bool success :1;
} _HfcDbService_addNamespace_presult__isset;

class HfcDbService_addNamespace_presult {
 public:


  virtual ~HfcDbService_addNamespace_presult() noexcept;
  bool* success;

  _HfcDbService_addNamespace_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HfcDbService_insertPlain_args__isset {
  _HfcDbService_insertPlain_args__isset() : t(false) {}
  bool t :1;
} _HfcDbService_insertPlain_args__isset;

class HfcDbService_insertPlain_args {
 public:

  HfcDbService_insertPlain_args(const HfcDbService_insertPlain_args&);
  HfcDbService_insertPlain_args& operator=(const HfcDbService_insertPlain_args&);
  HfcDbService_insertPlain_args() noexcept {
  }

  virtual ~HfcDbService_insertPlain_args() noexcept;
  Table t;

  _HfcDbService_insertPlain_args__isset __isset;

  void __set_t(const Table& val);

  bool operator == (const HfcDbService_insertPlain_args & rhs) const
  {
    if (!(t == rhs.t))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_insertPlain_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_insertPlain_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HfcDbService_insertPlain_pargs {
 public:


  virtual ~HfcDbService_insertPlain_pargs() noexcept;
  const Table* t;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_insertPlain_result__isset {
  _HfcDbService_insertPlain_result__isset() : success(false), tex(false) {}
  bool success :1;
  bool tex :1;
} _HfcDbService_insertPlain_result__isset;

class HfcDbService_insertPlain_result {
 public:

  HfcDbService_insertPlain_result(const HfcDbService_insertPlain_result&);
  HfcDbService_insertPlain_result& operator=(const HfcDbService_insertPlain_result&);
  HfcDbService_insertPlain_result() noexcept
                                  : success(0) {
  }

  virtual ~HfcDbService_insertPlain_result() noexcept;
  int32_t success;
  TupleException tex;

  _HfcDbService_insertPlain_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_tex(const TupleException& val);

  bool operator == (const HfcDbService_insertPlain_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(tex == rhs.tex))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_insertPlain_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_insertPlain_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_insertPlain_presult__isset {
  _HfcDbService_insertPlain_presult__isset() : success(false), tex(false) {}
  bool success :1;
  bool tex :1;
} _HfcDbService_insertPlain_presult__isset;

class HfcDbService_insertPlain_presult {
 public:


  virtual ~HfcDbService_insertPlain_presult() noexcept;
  int32_t* success;
  TupleException tex;

  _HfcDbService_insertPlain_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HfcDbService_selectQuery_args__isset {
  _HfcDbService_selectQuery_args__isset() : query(false) {}
  bool query :1;
} _HfcDbService_selectQuery_args__isset;

class HfcDbService_selectQuery_args {
 public:

  HfcDbService_selectQuery_args(const HfcDbService_selectQuery_args&);
  HfcDbService_selectQuery_args& operator=(const HfcDbService_selectQuery_args&);
  HfcDbService_selectQuery_args() noexcept
                                : query() {
  }

  virtual ~HfcDbService_selectQuery_args() noexcept;
  std::string query;

  _HfcDbService_selectQuery_args__isset __isset;

  void __set_query(const std::string& val);

  bool operator == (const HfcDbService_selectQuery_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_selectQuery_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_selectQuery_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HfcDbService_selectQuery_pargs {
 public:


  virtual ~HfcDbService_selectQuery_pargs() noexcept;
  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_selectQuery_result__isset {
  _HfcDbService_selectQuery_result__isset() : success(false), qex(false) {}
  bool success :1;
  bool qex :1;
} _HfcDbService_selectQuery_result__isset;

class HfcDbService_selectQuery_result {
 public:

  HfcDbService_selectQuery_result(const HfcDbService_selectQuery_result&);
  HfcDbService_selectQuery_result& operator=(const HfcDbService_selectQuery_result&);
  HfcDbService_selectQuery_result() noexcept {
  }

  virtual ~HfcDbService_selectQuery_result() noexcept;
  QueryResult success;
  QueryException qex;

  _HfcDbService_selectQuery_result__isset __isset;

  void __set_success(const QueryResult& val);

  void __set_qex(const QueryException& val);

  bool operator == (const HfcDbService_selectQuery_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(qex == rhs.qex))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_selectQuery_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_selectQuery_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_selectQuery_presult__isset {
  _HfcDbService_selectQuery_presult__isset() : success(false), qex(false) {}
  bool success :1;
  bool qex :1;
} _HfcDbService_selectQuery_presult__isset;

class HfcDbService_selectQuery_presult {
 public:


  virtual ~HfcDbService_selectQuery_presult() noexcept;
  QueryResult* success;
  QueryException qex;

  _HfcDbService_selectQuery_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HfcDbService_query_args__isset {
  _HfcDbService_query_args__isset() : query(false) {}
  bool query :1;
} _HfcDbService_query_args__isset;

class HfcDbService_query_args {
 public:

  HfcDbService_query_args(const HfcDbService_query_args&);
  HfcDbService_query_args& operator=(const HfcDbService_query_args&);
  HfcDbService_query_args() noexcept
                          : query() {
  }

  virtual ~HfcDbService_query_args() noexcept;
  std::string query;

  _HfcDbService_query_args__isset __isset;

  void __set_query(const std::string& val);

  bool operator == (const HfcDbService_query_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HfcDbService_query_pargs {
 public:


  virtual ~HfcDbService_query_pargs() noexcept;
  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_query_result__isset {
  _HfcDbService_query_result__isset() : success(false), qex(false) {}
  bool success :1;
  bool qex :1;
} _HfcDbService_query_result__isset;

class HfcDbService_query_result {
 public:

  HfcDbService_query_result(const HfcDbService_query_result&);
  HfcDbService_query_result& operator=(const HfcDbService_query_result&);
  HfcDbService_query_result() noexcept
                            : success() {
  }

  virtual ~HfcDbService_query_result() noexcept;
  std::string success;
  QueryException qex;

  _HfcDbService_query_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_qex(const QueryException& val);

  bool operator == (const HfcDbService_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(qex == rhs.qex))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_query_presult__isset {
  _HfcDbService_query_presult__isset() : success(false), qex(false) {}
  bool success :1;
  bool qex :1;
} _HfcDbService_query_presult__isset;

class HfcDbService_query_presult {
 public:


  virtual ~HfcDbService_query_presult() noexcept;
  std::string* success;
  QueryException qex;

  _HfcDbService_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HfcDbService_askQuery_args__isset {
  _HfcDbService_askQuery_args__isset() : query(false) {}
  bool query :1;
} _HfcDbService_askQuery_args__isset;

class HfcDbService_askQuery_args {
 public:

  HfcDbService_askQuery_args(const HfcDbService_askQuery_args&);
  HfcDbService_askQuery_args& operator=(const HfcDbService_askQuery_args&);
  HfcDbService_askQuery_args() noexcept
                             : query() {
  }

  virtual ~HfcDbService_askQuery_args() noexcept;
  std::string query;

  _HfcDbService_askQuery_args__isset __isset;

  void __set_query(const std::string& val);

  bool operator == (const HfcDbService_askQuery_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_askQuery_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_askQuery_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HfcDbService_askQuery_pargs {
 public:


  virtual ~HfcDbService_askQuery_pargs() noexcept;
  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_askQuery_result__isset {
  _HfcDbService_askQuery_result__isset() : success(false), qex(false) {}
  bool success :1;
  bool qex :1;
} _HfcDbService_askQuery_result__isset;

class HfcDbService_askQuery_result {
 public:

  HfcDbService_askQuery_result(const HfcDbService_askQuery_result&);
  HfcDbService_askQuery_result& operator=(const HfcDbService_askQuery_result&);
  HfcDbService_askQuery_result() noexcept
                               : success(0) {
  }

  virtual ~HfcDbService_askQuery_result() noexcept;
  bool success;
  QueryException qex;

  _HfcDbService_askQuery_result__isset __isset;

  void __set_success(const bool val);

  void __set_qex(const QueryException& val);

  bool operator == (const HfcDbService_askQuery_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(qex == rhs.qex))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_askQuery_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_askQuery_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_askQuery_presult__isset {
  _HfcDbService_askQuery_presult__isset() : success(false), qex(false) {}
  bool success :1;
  bool qex :1;
} _HfcDbService_askQuery_presult__isset;

class HfcDbService_askQuery_presult {
 public:


  virtual ~HfcDbService_askQuery_presult() noexcept;
  bool* success;
  QueryException qex;

  _HfcDbService_askQuery_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HfcDbService_insert_args__isset {
  _HfcDbService_insert_args__isset() : t(false) {}
  bool t :1;
} _HfcDbService_insert_args__isset;

class HfcDbService_insert_args {
 public:

  HfcDbService_insert_args(const HfcDbService_insert_args&);
  HfcDbService_insert_args& operator=(const HfcDbService_insert_args&);
  HfcDbService_insert_args() noexcept {
  }

  virtual ~HfcDbService_insert_args() noexcept;
  Table t;

  _HfcDbService_insert_args__isset __isset;

  void __set_t(const Table& val);

  bool operator == (const HfcDbService_insert_args & rhs) const
  {
    if (!(t == rhs.t))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_insert_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_insert_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HfcDbService_insert_pargs {
 public:


  virtual ~HfcDbService_insert_pargs() noexcept;
  const Table* t;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_insert_result__isset {
  _HfcDbService_insert_result__isset() : success(false), tex(false) {}
  bool success :1;
  bool tex :1;
} _HfcDbService_insert_result__isset;

class HfcDbService_insert_result {
 public:

  HfcDbService_insert_result(const HfcDbService_insert_result&);
  HfcDbService_insert_result& operator=(const HfcDbService_insert_result&);
  HfcDbService_insert_result() noexcept
                             : success(0) {
  }

  virtual ~HfcDbService_insert_result() noexcept;
  int32_t success;
  TupleException tex;

  _HfcDbService_insert_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_tex(const TupleException& val);

  bool operator == (const HfcDbService_insert_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(tex == rhs.tex))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_insert_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_insert_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_insert_presult__isset {
  _HfcDbService_insert_presult__isset() : success(false), tex(false) {}
  bool success :1;
  bool tex :1;
} _HfcDbService_insert_presult__isset;

class HfcDbService_insert_presult {
 public:


  virtual ~HfcDbService_insert_presult() noexcept;
  int32_t* success;
  TupleException tex;

  _HfcDbService_insert_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HfcDbService_insertTimed_args__isset {
  _HfcDbService_insertTimed_args__isset() : t(false), timestamp(false) {}
  bool t :1;
  bool timestamp :1;
} _HfcDbService_insertTimed_args__isset;

class HfcDbService_insertTimed_args {
 public:

  HfcDbService_insertTimed_args(const HfcDbService_insertTimed_args&);
  HfcDbService_insertTimed_args& operator=(const HfcDbService_insertTimed_args&);
  HfcDbService_insertTimed_args() noexcept
                                : timestamp(0) {
  }

  virtual ~HfcDbService_insertTimed_args() noexcept;
  Table t;
  int64_t timestamp;

  _HfcDbService_insertTimed_args__isset __isset;

  void __set_t(const Table& val);

  void __set_timestamp(const int64_t val);

  bool operator == (const HfcDbService_insertTimed_args & rhs) const
  {
    if (!(t == rhs.t))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_insertTimed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_insertTimed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HfcDbService_insertTimed_pargs {
 public:


  virtual ~HfcDbService_insertTimed_pargs() noexcept;
  const Table* t;
  const int64_t* timestamp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_insertTimed_result__isset {
  _HfcDbService_insertTimed_result__isset() : success(false), tex(false) {}
  bool success :1;
  bool tex :1;
} _HfcDbService_insertTimed_result__isset;

class HfcDbService_insertTimed_result {
 public:

  HfcDbService_insertTimed_result(const HfcDbService_insertTimed_result&);
  HfcDbService_insertTimed_result& operator=(const HfcDbService_insertTimed_result&);
  HfcDbService_insertTimed_result() noexcept
                                  : success(0) {
  }

  virtual ~HfcDbService_insertTimed_result() noexcept;
  int32_t success;
  TupleException tex;

  _HfcDbService_insertTimed_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_tex(const TupleException& val);

  bool operator == (const HfcDbService_insertTimed_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(tex == rhs.tex))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_insertTimed_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_insertTimed_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_insertTimed_presult__isset {
  _HfcDbService_insertTimed_presult__isset() : success(false), tex(false) {}
  bool success :1;
  bool tex :1;
} _HfcDbService_insertTimed_presult__isset;

class HfcDbService_insertTimed_presult {
 public:


  virtual ~HfcDbService_insertTimed_presult() noexcept;
  int32_t* success;
  TupleException tex;

  _HfcDbService_insertTimed_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HfcDbService_getMultiValue_args__isset {
  _HfcDbService_getMultiValue_args__isset() : uri(false), property(false) {}
  bool uri :1;
  bool property :1;
} _HfcDbService_getMultiValue_args__isset;

class HfcDbService_getMultiValue_args {
 public:

  HfcDbService_getMultiValue_args(const HfcDbService_getMultiValue_args&);
  HfcDbService_getMultiValue_args& operator=(const HfcDbService_getMultiValue_args&);
  HfcDbService_getMultiValue_args() noexcept
                                  : uri(),
                                    property() {
  }

  virtual ~HfcDbService_getMultiValue_args() noexcept;
  std::string uri;
  std::string property;

  _HfcDbService_getMultiValue_args__isset __isset;

  void __set_uri(const std::string& val);

  void __set_property(const std::string& val);

  bool operator == (const HfcDbService_getMultiValue_args & rhs) const
  {
    if (!(uri == rhs.uri))
      return false;
    if (!(property == rhs.property))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_getMultiValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_getMultiValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HfcDbService_getMultiValue_pargs {
 public:


  virtual ~HfcDbService_getMultiValue_pargs() noexcept;
  const std::string* uri;
  const std::string* property;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_getMultiValue_result__isset {
  _HfcDbService_getMultiValue_result__isset() : success(false), tex(false), qex(false) {}
  bool success :1;
  bool tex :1;
  bool qex :1;
} _HfcDbService_getMultiValue_result__isset;

class HfcDbService_getMultiValue_result {
 public:

  HfcDbService_getMultiValue_result(const HfcDbService_getMultiValue_result&);
  HfcDbService_getMultiValue_result& operator=(const HfcDbService_getMultiValue_result&);
  HfcDbService_getMultiValue_result() noexcept {
  }

  virtual ~HfcDbService_getMultiValue_result() noexcept;
  std::set<std::string>  success;
  TupleException tex;
  QueryException qex;

  _HfcDbService_getMultiValue_result__isset __isset;

  void __set_success(const std::set<std::string> & val);

  void __set_tex(const TupleException& val);

  void __set_qex(const QueryException& val);

  bool operator == (const HfcDbService_getMultiValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(tex == rhs.tex))
      return false;
    if (!(qex == rhs.qex))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_getMultiValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_getMultiValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_getMultiValue_presult__isset {
  _HfcDbService_getMultiValue_presult__isset() : success(false), tex(false), qex(false) {}
  bool success :1;
  bool tex :1;
  bool qex :1;
} _HfcDbService_getMultiValue_presult__isset;

class HfcDbService_getMultiValue_presult {
 public:


  virtual ~HfcDbService_getMultiValue_presult() noexcept;
  std::set<std::string> * success;
  TupleException tex;
  QueryException qex;

  _HfcDbService_getMultiValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HfcDbService_addToMultiValue_args__isset {
  _HfcDbService_addToMultiValue_args__isset() : uri(false), property(false), value(false) {}
  bool uri :1;
  bool property :1;
  bool value :1;
} _HfcDbService_addToMultiValue_args__isset;

class HfcDbService_addToMultiValue_args {
 public:

  HfcDbService_addToMultiValue_args(const HfcDbService_addToMultiValue_args&);
  HfcDbService_addToMultiValue_args& operator=(const HfcDbService_addToMultiValue_args&);
  HfcDbService_addToMultiValue_args() noexcept
                                    : uri(),
                                      property(),
                                      value() {
  }

  virtual ~HfcDbService_addToMultiValue_args() noexcept;
  std::string uri;
  std::string property;
  std::string value;

  _HfcDbService_addToMultiValue_args__isset __isset;

  void __set_uri(const std::string& val);

  void __set_property(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const HfcDbService_addToMultiValue_args & rhs) const
  {
    if (!(uri == rhs.uri))
      return false;
    if (!(property == rhs.property))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_addToMultiValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_addToMultiValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HfcDbService_addToMultiValue_pargs {
 public:


  virtual ~HfcDbService_addToMultiValue_pargs() noexcept;
  const std::string* uri;
  const std::string* property;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_addToMultiValue_result__isset {
  _HfcDbService_addToMultiValue_result__isset() : success(false), tex(false) {}
  bool success :1;
  bool tex :1;
} _HfcDbService_addToMultiValue_result__isset;

class HfcDbService_addToMultiValue_result {
 public:

  HfcDbService_addToMultiValue_result(const HfcDbService_addToMultiValue_result&);
  HfcDbService_addToMultiValue_result& operator=(const HfcDbService_addToMultiValue_result&);
  HfcDbService_addToMultiValue_result() noexcept
                                      : success(0) {
  }

  virtual ~HfcDbService_addToMultiValue_result() noexcept;
  int32_t success;
  TupleException tex;

  _HfcDbService_addToMultiValue_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_tex(const TupleException& val);

  bool operator == (const HfcDbService_addToMultiValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(tex == rhs.tex))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_addToMultiValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_addToMultiValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_addToMultiValue_presult__isset {
  _HfcDbService_addToMultiValue_presult__isset() : success(false), tex(false) {}
  bool success :1;
  bool tex :1;
} _HfcDbService_addToMultiValue_presult__isset;

class HfcDbService_addToMultiValue_presult {
 public:


  virtual ~HfcDbService_addToMultiValue_presult() noexcept;
  int32_t* success;
  TupleException tex;

  _HfcDbService_addToMultiValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HfcDbService_removeFromMultiValue_args__isset {
  _HfcDbService_removeFromMultiValue_args__isset() : uri(false), property(false), value(false) {}
  bool uri :1;
  bool property :1;
  bool value :1;
} _HfcDbService_removeFromMultiValue_args__isset;

class HfcDbService_removeFromMultiValue_args {
 public:

  HfcDbService_removeFromMultiValue_args(const HfcDbService_removeFromMultiValue_args&);
  HfcDbService_removeFromMultiValue_args& operator=(const HfcDbService_removeFromMultiValue_args&);
  HfcDbService_removeFromMultiValue_args() noexcept
                                         : uri(),
                                           property(),
                                           value() {
  }

  virtual ~HfcDbService_removeFromMultiValue_args() noexcept;
  std::string uri;
  std::string property;
  std::string value;

  _HfcDbService_removeFromMultiValue_args__isset __isset;

  void __set_uri(const std::string& val);

  void __set_property(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const HfcDbService_removeFromMultiValue_args & rhs) const
  {
    if (!(uri == rhs.uri))
      return false;
    if (!(property == rhs.property))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_removeFromMultiValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_removeFromMultiValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HfcDbService_removeFromMultiValue_pargs {
 public:


  virtual ~HfcDbService_removeFromMultiValue_pargs() noexcept;
  const std::string* uri;
  const std::string* property;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_removeFromMultiValue_result__isset {
  _HfcDbService_removeFromMultiValue_result__isset() : success(false), tex(false) {}
  bool success :1;
  bool tex :1;
} _HfcDbService_removeFromMultiValue_result__isset;

class HfcDbService_removeFromMultiValue_result {
 public:

  HfcDbService_removeFromMultiValue_result(const HfcDbService_removeFromMultiValue_result&);
  HfcDbService_removeFromMultiValue_result& operator=(const HfcDbService_removeFromMultiValue_result&);
  HfcDbService_removeFromMultiValue_result() noexcept
                                           : success(0) {
  }

  virtual ~HfcDbService_removeFromMultiValue_result() noexcept;
  int32_t success;
  TupleException tex;

  _HfcDbService_removeFromMultiValue_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_tex(const TupleException& val);

  bool operator == (const HfcDbService_removeFromMultiValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(tex == rhs.tex))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_removeFromMultiValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_removeFromMultiValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_removeFromMultiValue_presult__isset {
  _HfcDbService_removeFromMultiValue_presult__isset() : success(false), tex(false) {}
  bool success :1;
  bool tex :1;
} _HfcDbService_removeFromMultiValue_presult__isset;

class HfcDbService_removeFromMultiValue_presult {
 public:


  virtual ~HfcDbService_removeFromMultiValue_presult() noexcept;
  int32_t* success;
  TupleException tex;

  _HfcDbService_removeFromMultiValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HfcDbService_setMultiValue_args__isset {
  _HfcDbService_setMultiValue_args__isset() : uri(false), property(false), value(false) {}
  bool uri :1;
  bool property :1;
  bool value :1;
} _HfcDbService_setMultiValue_args__isset;

class HfcDbService_setMultiValue_args {
 public:

  HfcDbService_setMultiValue_args(const HfcDbService_setMultiValue_args&);
  HfcDbService_setMultiValue_args& operator=(const HfcDbService_setMultiValue_args&);
  HfcDbService_setMultiValue_args() noexcept
                                  : uri(),
                                    property() {
  }

  virtual ~HfcDbService_setMultiValue_args() noexcept;
  std::string uri;
  std::string property;
  std::set<std::string>  value;

  _HfcDbService_setMultiValue_args__isset __isset;

  void __set_uri(const std::string& val);

  void __set_property(const std::string& val);

  void __set_value(const std::set<std::string> & val);

  bool operator == (const HfcDbService_setMultiValue_args & rhs) const
  {
    if (!(uri == rhs.uri))
      return false;
    if (!(property == rhs.property))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_setMultiValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_setMultiValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HfcDbService_setMultiValue_pargs {
 public:


  virtual ~HfcDbService_setMultiValue_pargs() noexcept;
  const std::string* uri;
  const std::string* property;
  const std::set<std::string> * value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_setMultiValue_result__isset {
  _HfcDbService_setMultiValue_result__isset() : success(false), tex(false) {}
  bool success :1;
  bool tex :1;
} _HfcDbService_setMultiValue_result__isset;

class HfcDbService_setMultiValue_result {
 public:

  HfcDbService_setMultiValue_result(const HfcDbService_setMultiValue_result&);
  HfcDbService_setMultiValue_result& operator=(const HfcDbService_setMultiValue_result&);
  HfcDbService_setMultiValue_result() noexcept
                                    : success(0) {
  }

  virtual ~HfcDbService_setMultiValue_result() noexcept;
  int32_t success;
  TupleException tex;

  _HfcDbService_setMultiValue_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_tex(const TupleException& val);

  bool operator == (const HfcDbService_setMultiValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(tex == rhs.tex))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_setMultiValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_setMultiValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_setMultiValue_presult__isset {
  _HfcDbService_setMultiValue_presult__isset() : success(false), tex(false) {}
  bool success :1;
  bool tex :1;
} _HfcDbService_setMultiValue_presult__isset;

class HfcDbService_setMultiValue_presult {
 public:


  virtual ~HfcDbService_setMultiValue_presult() noexcept;
  int32_t* success;
  TupleException tex;

  _HfcDbService_setMultiValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HfcDbService_getNewId_args__isset {
  _HfcDbService_getNewId_args__isset() : nameSpace(false), type(false) {}
  bool nameSpace :1;
  bool type :1;
} _HfcDbService_getNewId_args__isset;

class HfcDbService_getNewId_args {
 public:

  HfcDbService_getNewId_args(const HfcDbService_getNewId_args&);
  HfcDbService_getNewId_args& operator=(const HfcDbService_getNewId_args&);
  HfcDbService_getNewId_args() noexcept
                             : nameSpace(),
                               type() {
  }

  virtual ~HfcDbService_getNewId_args() noexcept;
  std::string nameSpace;
  std::string type;

  _HfcDbService_getNewId_args__isset __isset;

  void __set_nameSpace(const std::string& val);

  void __set_type(const std::string& val);

  bool operator == (const HfcDbService_getNewId_args & rhs) const
  {
    if (!(nameSpace == rhs.nameSpace))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_getNewId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_getNewId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HfcDbService_getNewId_pargs {
 public:


  virtual ~HfcDbService_getNewId_pargs() noexcept;
  const std::string* nameSpace;
  const std::string* type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_getNewId_result__isset {
  _HfcDbService_getNewId_result__isset() : success(false), tex(false) {}
  bool success :1;
  bool tex :1;
} _HfcDbService_getNewId_result__isset;

class HfcDbService_getNewId_result {
 public:

  HfcDbService_getNewId_result(const HfcDbService_getNewId_result&);
  HfcDbService_getNewId_result& operator=(const HfcDbService_getNewId_result&);
  HfcDbService_getNewId_result() noexcept
                               : success() {
  }

  virtual ~HfcDbService_getNewId_result() noexcept;
  std::string success;
  TupleException tex;

  _HfcDbService_getNewId_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_tex(const TupleException& val);

  bool operator == (const HfcDbService_getNewId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(tex == rhs.tex))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_getNewId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_getNewId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_getNewId_presult__isset {
  _HfcDbService_getNewId_presult__isset() : success(false), tex(false) {}
  bool success :1;
  bool tex :1;
} _HfcDbService_getNewId_presult__isset;

class HfcDbService_getNewId_presult {
 public:


  virtual ~HfcDbService_getNewId_presult() noexcept;
  std::string* success;
  TupleException tex;

  _HfcDbService_getNewId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HfcDbService_setValue_args__isset {
  _HfcDbService_setValue_args__isset() : uri(false), predicate(false), value(false) {}
  bool uri :1;
  bool predicate :1;
  bool value :1;
} _HfcDbService_setValue_args__isset;

class HfcDbService_setValue_args {
 public:

  HfcDbService_setValue_args(const HfcDbService_setValue_args&);
  HfcDbService_setValue_args& operator=(const HfcDbService_setValue_args&);
  HfcDbService_setValue_args() noexcept
                             : uri(),
                               predicate(),
                               value() {
  }

  virtual ~HfcDbService_setValue_args() noexcept;
  std::string uri;
  std::string predicate;
  std::string value;

  _HfcDbService_setValue_args__isset __isset;

  void __set_uri(const std::string& val);

  void __set_predicate(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const HfcDbService_setValue_args & rhs) const
  {
    if (!(uri == rhs.uri))
      return false;
    if (!(predicate == rhs.predicate))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_setValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_setValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HfcDbService_setValue_pargs {
 public:


  virtual ~HfcDbService_setValue_pargs() noexcept;
  const std::string* uri;
  const std::string* predicate;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_setValue_result__isset {
  _HfcDbService_setValue_result__isset() : success(false), tex(false) {}
  bool success :1;
  bool tex :1;
} _HfcDbService_setValue_result__isset;

class HfcDbService_setValue_result {
 public:

  HfcDbService_setValue_result(const HfcDbService_setValue_result&);
  HfcDbService_setValue_result& operator=(const HfcDbService_setValue_result&);
  HfcDbService_setValue_result() noexcept
                               : success(0) {
  }

  virtual ~HfcDbService_setValue_result() noexcept;
  int32_t success;
  TupleException tex;

  _HfcDbService_setValue_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_tex(const TupleException& val);

  bool operator == (const HfcDbService_setValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(tex == rhs.tex))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_setValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_setValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_setValue_presult__isset {
  _HfcDbService_setValue_presult__isset() : success(false), tex(false) {}
  bool success :1;
  bool tex :1;
} _HfcDbService_setValue_presult__isset;

class HfcDbService_setValue_presult {
 public:


  virtual ~HfcDbService_setValue_presult() noexcept;
  int32_t* success;
  TupleException tex;

  _HfcDbService_setValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HfcDbService_getValue_args__isset {
  _HfcDbService_getValue_args__isset() : uri(false), predicate(false) {}
  bool uri :1;
  bool predicate :1;
} _HfcDbService_getValue_args__isset;

class HfcDbService_getValue_args {
 public:

  HfcDbService_getValue_args(const HfcDbService_getValue_args&);
  HfcDbService_getValue_args& operator=(const HfcDbService_getValue_args&);
  HfcDbService_getValue_args() noexcept
                             : uri(),
                               predicate() {
  }

  virtual ~HfcDbService_getValue_args() noexcept;
  std::string uri;
  std::string predicate;

  _HfcDbService_getValue_args__isset __isset;

  void __set_uri(const std::string& val);

  void __set_predicate(const std::string& val);

  bool operator == (const HfcDbService_getValue_args & rhs) const
  {
    if (!(uri == rhs.uri))
      return false;
    if (!(predicate == rhs.predicate))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_getValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_getValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HfcDbService_getValue_pargs {
 public:


  virtual ~HfcDbService_getValue_pargs() noexcept;
  const std::string* uri;
  const std::string* predicate;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_getValue_result__isset {
  _HfcDbService_getValue_result__isset() : success(false), qex(false) {}
  bool success :1;
  bool qex :1;
} _HfcDbService_getValue_result__isset;

class HfcDbService_getValue_result {
 public:

  HfcDbService_getValue_result(const HfcDbService_getValue_result&);
  HfcDbService_getValue_result& operator=(const HfcDbService_getValue_result&);
  HfcDbService_getValue_result() noexcept
                               : success() {
  }

  virtual ~HfcDbService_getValue_result() noexcept;
  std::string success;
  QueryException qex;

  _HfcDbService_getValue_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_qex(const QueryException& val);

  bool operator == (const HfcDbService_getValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(qex == rhs.qex))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_getValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_getValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_getValue_presult__isset {
  _HfcDbService_getValue_presult__isset() : success(false), qex(false) {}
  bool success :1;
  bool qex :1;
} _HfcDbService_getValue_presult__isset;

class HfcDbService_getValue_presult {
 public:


  virtual ~HfcDbService_getValue_presult() noexcept;
  std::string* success;
  QueryException qex;

  _HfcDbService_getValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HfcDbService_getAllProps_args__isset {
  _HfcDbService_getAllProps_args__isset() : classuri(false) {}
  bool classuri :1;
} _HfcDbService_getAllProps_args__isset;

class HfcDbService_getAllProps_args {
 public:

  HfcDbService_getAllProps_args(const HfcDbService_getAllProps_args&);
  HfcDbService_getAllProps_args& operator=(const HfcDbService_getAllProps_args&);
  HfcDbService_getAllProps_args() noexcept
                                : classuri() {
  }

  virtual ~HfcDbService_getAllProps_args() noexcept;
  std::string classuri;

  _HfcDbService_getAllProps_args__isset __isset;

  void __set_classuri(const std::string& val);

  bool operator == (const HfcDbService_getAllProps_args & rhs) const
  {
    if (!(classuri == rhs.classuri))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_getAllProps_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_getAllProps_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HfcDbService_getAllProps_pargs {
 public:


  virtual ~HfcDbService_getAllProps_pargs() noexcept;
  const std::string* classuri;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_getAllProps_result__isset {
  _HfcDbService_getAllProps_result__isset() : success(false) {}
  bool success :1;
} _HfcDbService_getAllProps_result__isset;

class HfcDbService_getAllProps_result {
 public:

  HfcDbService_getAllProps_result(const HfcDbService_getAllProps_result&);
  HfcDbService_getAllProps_result& operator=(const HfcDbService_getAllProps_result&);
  HfcDbService_getAllProps_result() noexcept {
  }

  virtual ~HfcDbService_getAllProps_result() noexcept;
  std::map<std::string, PropInfo>  success;

  _HfcDbService_getAllProps_result__isset __isset;

  void __set_success(const std::map<std::string, PropInfo> & val);

  bool operator == (const HfcDbService_getAllProps_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_getAllProps_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_getAllProps_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_getAllProps_presult__isset {
  _HfcDbService_getAllProps_presult__isset() : success(false) {}
  bool success :1;
} _HfcDbService_getAllProps_presult__isset;

class HfcDbService_getAllProps_presult {
 public:


  virtual ~HfcDbService_getAllProps_presult() noexcept;
  std::map<std::string, PropInfo> * success;

  _HfcDbService_getAllProps_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HfcDbService_getClassOf_args__isset {
  _HfcDbService_getClassOf_args__isset() : uri(false) {}
  bool uri :1;
} _HfcDbService_getClassOf_args__isset;

class HfcDbService_getClassOf_args {
 public:

  HfcDbService_getClassOf_args(const HfcDbService_getClassOf_args&);
  HfcDbService_getClassOf_args& operator=(const HfcDbService_getClassOf_args&);
  HfcDbService_getClassOf_args() noexcept
                               : uri() {
  }

  virtual ~HfcDbService_getClassOf_args() noexcept;
  std::string uri;

  _HfcDbService_getClassOf_args__isset __isset;

  void __set_uri(const std::string& val);

  bool operator == (const HfcDbService_getClassOf_args & rhs) const
  {
    if (!(uri == rhs.uri))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_getClassOf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_getClassOf_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HfcDbService_getClassOf_pargs {
 public:


  virtual ~HfcDbService_getClassOf_pargs() noexcept;
  const std::string* uri;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_getClassOf_result__isset {
  _HfcDbService_getClassOf_result__isset() : success(false) {}
  bool success :1;
} _HfcDbService_getClassOf_result__isset;

class HfcDbService_getClassOf_result {
 public:

  HfcDbService_getClassOf_result(const HfcDbService_getClassOf_result&);
  HfcDbService_getClassOf_result& operator=(const HfcDbService_getClassOf_result&);
  HfcDbService_getClassOf_result() noexcept
                                 : success() {
  }

  virtual ~HfcDbService_getClassOf_result() noexcept;
  std::string success;

  _HfcDbService_getClassOf_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const HfcDbService_getClassOf_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HfcDbService_getClassOf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HfcDbService_getClassOf_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HfcDbService_getClassOf_presult__isset {
  _HfcDbService_getClassOf_presult__isset() : success(false) {}
  bool success :1;
} _HfcDbService_getClassOf_presult__isset;

class HfcDbService_getClassOf_presult {
 public:


  virtual ~HfcDbService_getClassOf_presult() noexcept;
  std::string* success;

  _HfcDbService_getClassOf_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class HfcDbServiceClient : virtual public HfcDbServiceIf {
 public:
  HfcDbServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  HfcDbServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t ping() override;
  void send_ping();
  int32_t recv_ping();
  bool addNamespace(const std::string& shortForm, const std::string& longForm) override;
  void send_addNamespace(const std::string& shortForm, const std::string& longForm);
  bool recv_addNamespace();
  int32_t insertPlain(const Table& t) override;
  void send_insertPlain(const Table& t);
  int32_t recv_insertPlain();
  void selectQuery(QueryResult& _return, const std::string& query) override;
  void send_selectQuery(const std::string& query);
  void recv_selectQuery(QueryResult& _return);
  void query(std::string& _return, const std::string& query) override;
  void send_query(const std::string& query);
  void recv_query(std::string& _return);
  bool askQuery(const std::string& query) override;
  void send_askQuery(const std::string& query);
  bool recv_askQuery();
  int32_t insert(const Table& t) override;
  void send_insert(const Table& t);
  int32_t recv_insert();
  int32_t insertTimed(const Table& t, const int64_t timestamp) override;
  void send_insertTimed(const Table& t, const int64_t timestamp);
  int32_t recv_insertTimed();
  void getMultiValue(std::set<std::string> & _return, const std::string& uri, const std::string& property) override;
  void send_getMultiValue(const std::string& uri, const std::string& property);
  void recv_getMultiValue(std::set<std::string> & _return);
  int32_t addToMultiValue(const std::string& uri, const std::string& property, const std::string& value) override;
  void send_addToMultiValue(const std::string& uri, const std::string& property, const std::string& value);
  int32_t recv_addToMultiValue();
  int32_t removeFromMultiValue(const std::string& uri, const std::string& property, const std::string& value) override;
  void send_removeFromMultiValue(const std::string& uri, const std::string& property, const std::string& value);
  int32_t recv_removeFromMultiValue();
  int32_t setMultiValue(const std::string& uri, const std::string& property, const std::set<std::string> & value) override;
  void send_setMultiValue(const std::string& uri, const std::string& property, const std::set<std::string> & value);
  int32_t recv_setMultiValue();
  void getNewId(std::string& _return, const std::string& nameSpace, const std::string& type) override;
  void send_getNewId(const std::string& nameSpace, const std::string& type);
  void recv_getNewId(std::string& _return);
  int32_t setValue(const std::string& uri, const std::string& predicate, const std::string& value) override;
  void send_setValue(const std::string& uri, const std::string& predicate, const std::string& value);
  int32_t recv_setValue();
  void getValue(std::string& _return, const std::string& uri, const std::string& predicate) override;
  void send_getValue(const std::string& uri, const std::string& predicate);
  void recv_getValue(std::string& _return);
  void getAllProps(std::map<std::string, PropInfo> & _return, const std::string& classuri) override;
  void send_getAllProps(const std::string& classuri);
  void recv_getAllProps(std::map<std::string, PropInfo> & _return);
  void getClassOf(std::string& _return, const std::string& uri) override;
  void send_getClassOf(const std::string& uri);
  void recv_getClassOf(std::string& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class HfcDbServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<HfcDbServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (HfcDbServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addNamespace(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_insertPlain(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_selectQuery(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_askQuery(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_insert(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_insertTimed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMultiValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addToMultiValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeFromMultiValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setMultiValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNewId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllProps(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getClassOf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  HfcDbServiceProcessor(::std::shared_ptr<HfcDbServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &HfcDbServiceProcessor::process_ping;
    processMap_["addNamespace"] = &HfcDbServiceProcessor::process_addNamespace;
    processMap_["insertPlain"] = &HfcDbServiceProcessor::process_insertPlain;
    processMap_["selectQuery"] = &HfcDbServiceProcessor::process_selectQuery;
    processMap_["query"] = &HfcDbServiceProcessor::process_query;
    processMap_["askQuery"] = &HfcDbServiceProcessor::process_askQuery;
    processMap_["insert"] = &HfcDbServiceProcessor::process_insert;
    processMap_["insertTimed"] = &HfcDbServiceProcessor::process_insertTimed;
    processMap_["getMultiValue"] = &HfcDbServiceProcessor::process_getMultiValue;
    processMap_["addToMultiValue"] = &HfcDbServiceProcessor::process_addToMultiValue;
    processMap_["removeFromMultiValue"] = &HfcDbServiceProcessor::process_removeFromMultiValue;
    processMap_["setMultiValue"] = &HfcDbServiceProcessor::process_setMultiValue;
    processMap_["getNewId"] = &HfcDbServiceProcessor::process_getNewId;
    processMap_["setValue"] = &HfcDbServiceProcessor::process_setValue;
    processMap_["getValue"] = &HfcDbServiceProcessor::process_getValue;
    processMap_["getAllProps"] = &HfcDbServiceProcessor::process_getAllProps;
    processMap_["getClassOf"] = &HfcDbServiceProcessor::process_getClassOf;
  }

  virtual ~HfcDbServiceProcessor() {}
};

class HfcDbServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  HfcDbServiceProcessorFactory(const ::std::shared_ptr< HfcDbServiceIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< HfcDbServiceIfFactory > handlerFactory_;
};

class HfcDbServiceMultiface : virtual public HfcDbServiceIf {
 public:
  HfcDbServiceMultiface(std::vector<std::shared_ptr<HfcDbServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~HfcDbServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<HfcDbServiceIf> > ifaces_;
  HfcDbServiceMultiface() {}
  void add(::std::shared_ptr<HfcDbServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t ping() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    return ifaces_[i]->ping();
  }

  bool addNamespace(const std::string& shortForm, const std::string& longForm) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addNamespace(shortForm, longForm);
    }
    return ifaces_[i]->addNamespace(shortForm, longForm);
  }

  int32_t insertPlain(const Table& t) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->insertPlain(t);
    }
    return ifaces_[i]->insertPlain(t);
  }

  void selectQuery(QueryResult& _return, const std::string& query) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->selectQuery(_return, query);
    }
    ifaces_[i]->selectQuery(_return, query);
    return;
  }

  void query(std::string& _return, const std::string& query) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query(_return, query);
    }
    ifaces_[i]->query(_return, query);
    return;
  }

  bool askQuery(const std::string& query) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->askQuery(query);
    }
    return ifaces_[i]->askQuery(query);
  }

  int32_t insert(const Table& t) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->insert(t);
    }
    return ifaces_[i]->insert(t);
  }

  int32_t insertTimed(const Table& t, const int64_t timestamp) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->insertTimed(t, timestamp);
    }
    return ifaces_[i]->insertTimed(t, timestamp);
  }

  void getMultiValue(std::set<std::string> & _return, const std::string& uri, const std::string& property) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMultiValue(_return, uri, property);
    }
    ifaces_[i]->getMultiValue(_return, uri, property);
    return;
  }

  int32_t addToMultiValue(const std::string& uri, const std::string& property, const std::string& value) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addToMultiValue(uri, property, value);
    }
    return ifaces_[i]->addToMultiValue(uri, property, value);
  }

  int32_t removeFromMultiValue(const std::string& uri, const std::string& property, const std::string& value) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeFromMultiValue(uri, property, value);
    }
    return ifaces_[i]->removeFromMultiValue(uri, property, value);
  }

  int32_t setMultiValue(const std::string& uri, const std::string& property, const std::set<std::string> & value) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setMultiValue(uri, property, value);
    }
    return ifaces_[i]->setMultiValue(uri, property, value);
  }

  void getNewId(std::string& _return, const std::string& nameSpace, const std::string& type) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNewId(_return, nameSpace, type);
    }
    ifaces_[i]->getNewId(_return, nameSpace, type);
    return;
  }

  int32_t setValue(const std::string& uri, const std::string& predicate, const std::string& value) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setValue(uri, predicate, value);
    }
    return ifaces_[i]->setValue(uri, predicate, value);
  }

  void getValue(std::string& _return, const std::string& uri, const std::string& predicate) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getValue(_return, uri, predicate);
    }
    ifaces_[i]->getValue(_return, uri, predicate);
    return;
  }

  void getAllProps(std::map<std::string, PropInfo> & _return, const std::string& classuri) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllProps(_return, classuri);
    }
    ifaces_[i]->getAllProps(_return, classuri);
    return;
  }

  void getClassOf(std::string& _return, const std::string& uri) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getClassOf(_return, uri);
    }
    ifaces_[i]->getClassOf(_return, uri);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class HfcDbServiceConcurrentClient : virtual public HfcDbServiceIf {
 public:
  HfcDbServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  HfcDbServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t ping() override;
  int32_t send_ping();
  int32_t recv_ping(const int32_t seqid);
  bool addNamespace(const std::string& shortForm, const std::string& longForm) override;
  int32_t send_addNamespace(const std::string& shortForm, const std::string& longForm);
  bool recv_addNamespace(const int32_t seqid);
  int32_t insertPlain(const Table& t) override;
  int32_t send_insertPlain(const Table& t);
  int32_t recv_insertPlain(const int32_t seqid);
  void selectQuery(QueryResult& _return, const std::string& query) override;
  int32_t send_selectQuery(const std::string& query);
  void recv_selectQuery(QueryResult& _return, const int32_t seqid);
  void query(std::string& _return, const std::string& query) override;
  int32_t send_query(const std::string& query);
  void recv_query(std::string& _return, const int32_t seqid);
  bool askQuery(const std::string& query) override;
  int32_t send_askQuery(const std::string& query);
  bool recv_askQuery(const int32_t seqid);
  int32_t insert(const Table& t) override;
  int32_t send_insert(const Table& t);
  int32_t recv_insert(const int32_t seqid);
  int32_t insertTimed(const Table& t, const int64_t timestamp) override;
  int32_t send_insertTimed(const Table& t, const int64_t timestamp);
  int32_t recv_insertTimed(const int32_t seqid);
  void getMultiValue(std::set<std::string> & _return, const std::string& uri, const std::string& property) override;
  int32_t send_getMultiValue(const std::string& uri, const std::string& property);
  void recv_getMultiValue(std::set<std::string> & _return, const int32_t seqid);
  int32_t addToMultiValue(const std::string& uri, const std::string& property, const std::string& value) override;
  int32_t send_addToMultiValue(const std::string& uri, const std::string& property, const std::string& value);
  int32_t recv_addToMultiValue(const int32_t seqid);
  int32_t removeFromMultiValue(const std::string& uri, const std::string& property, const std::string& value) override;
  int32_t send_removeFromMultiValue(const std::string& uri, const std::string& property, const std::string& value);
  int32_t recv_removeFromMultiValue(const int32_t seqid);
  int32_t setMultiValue(const std::string& uri, const std::string& property, const std::set<std::string> & value) override;
  int32_t send_setMultiValue(const std::string& uri, const std::string& property, const std::set<std::string> & value);
  int32_t recv_setMultiValue(const int32_t seqid);
  void getNewId(std::string& _return, const std::string& nameSpace, const std::string& type) override;
  int32_t send_getNewId(const std::string& nameSpace, const std::string& type);
  void recv_getNewId(std::string& _return, const int32_t seqid);
  int32_t setValue(const std::string& uri, const std::string& predicate, const std::string& value) override;
  int32_t send_setValue(const std::string& uri, const std::string& predicate, const std::string& value);
  int32_t recv_setValue(const int32_t seqid);
  void getValue(std::string& _return, const std::string& uri, const std::string& predicate) override;
  int32_t send_getValue(const std::string& uri, const std::string& predicate);
  void recv_getValue(std::string& _return, const int32_t seqid);
  void getAllProps(std::map<std::string, PropInfo> & _return, const std::string& classuri) override;
  int32_t send_getAllProps(const std::string& classuri);
  void recv_getAllProps(std::map<std::string, PropInfo> & _return, const int32_t seqid);
  void getClassOf(std::string& _return, const std::string& uri) override;
  int32_t send_getClassOf(const std::string& uri);
  void recv_getClassOf(std::string& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
