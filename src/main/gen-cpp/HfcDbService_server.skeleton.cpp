// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "HfcDbService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::hfc_db;

class HfcDbServiceHandler : virtual public HfcDbServiceIf {
 public:
  HfcDbServiceHandler() {
    // Your initialization goes here
  }

  int32_t ping() {
    // Your implementation goes here
    printf("ping\n");
  }

  void init(const std::string& config_path) {
    // Your implementation goes here
    printf("init\n");
  }

  bool addNamespace(const std::string& shortForm, const std::string& longForm) {
    // Your implementation goes here
    printf("addNamespace\n");
  }

  int32_t insertPlain(const Table& t) {
    // Your implementation goes here
    printf("insertPlain\n");
  }

  void selectQuery(QueryResult& _return, const std::string& query) {
    // Your implementation goes here
    printf("selectQuery\n");
  }

  void query(std::string& _return, const std::string& query) {
    // Your implementation goes here
    printf("query\n");
  }

  bool askQuery(const std::string& query) {
    // Your implementation goes here
    printf("askQuery\n");
  }

  int32_t insert(const Table& t) {
    // Your implementation goes here
    printf("insert\n");
  }

  int32_t insertTimed(const Table& t, const int64_t timestamp) {
    // Your implementation goes here
    printf("insertTimed\n");
  }

  void getMultiValue(std::set<std::string> & _return, const std::string& uri, const std::string& property) {
    // Your implementation goes here
    printf("getMultiValue\n");
  }

  int32_t addToMultiValue(const std::string& uri, const std::string& property, const std::string& value) {
    // Your implementation goes here
    printf("addToMultiValue\n");
  }

  int32_t removeFromMultiValue(const std::string& uri, const std::string& property, const std::string& value) {
    // Your implementation goes here
    printf("removeFromMultiValue\n");
  }

  int32_t setMultiValue(const std::string& uri, const std::string& property, const std::set<std::string> & value) {
    // Your implementation goes here
    printf("setMultiValue\n");
  }

  void getNewId(std::string& _return, const std::string& nameSpace, const std::string& type) {
    // Your implementation goes here
    printf("getNewId\n");
  }

  int32_t setValue(const std::string& uri, const std::string& predicate, const std::string& value) {
    // Your implementation goes here
    printf("setValue\n");
  }

  void getValue(std::string& _return, const std::string& uri, const std::string& predicate) {
    // Your implementation goes here
    printf("getValue\n");
  }

  void getAllProps(std::map<std::string, PropInfo> & _return, const std::string& classuri) {
    // Your implementation goes here
    printf("getAllProps\n");
  }

  void getClassOf(std::string& _return, const std::string& uri) {
    // Your implementation goes here
    printf("getClassOf\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<HfcDbServiceHandler> handler(new HfcDbServiceHandler());
  ::std::shared_ptr<TProcessor> processor(new HfcDbServiceProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

