/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef hfc_db_TYPES_H
#define hfc_db_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace hfc_db {

class Table;

class QueryResult;

class PropInfo;

class QueryException;

class TupleException;

class WrongFormatException;


class Table : public virtual ::apache::thrift::TBase {
 public:

  Table(const Table&);
  Table& operator=(const Table&);
  Table() noexcept;

  virtual ~Table() noexcept;
  std::vector<std::vector<std::string> >  rows;

  void __set_rows(const std::vector<std::vector<std::string> > & val);

  bool operator == (const Table & rhs) const;
  bool operator != (const Table &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Table & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Table &a, Table &b);

std::ostream& operator<<(std::ostream& out, const Table& obj);


class QueryResult : public virtual ::apache::thrift::TBase {
 public:

  QueryResult(const QueryResult&);
  QueryResult& operator=(const QueryResult&);
  QueryResult() noexcept;

  virtual ~QueryResult() noexcept;
  std::vector<std::string>  variables;
  Table table;

  void __set_variables(const std::vector<std::string> & val);

  void __set_table(const Table& val);

  bool operator == (const QueryResult & rhs) const;
  bool operator != (const QueryResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(QueryResult &a, QueryResult &b);

std::ostream& operator<<(std::ostream& out, const QueryResult& obj);


class PropInfo : public virtual ::apache::thrift::TBase {
 public:

  PropInfo(const PropInfo&);
  PropInfo& operator=(const PropInfo&);
  PropInfo() noexcept;

  virtual ~PropInfo() noexcept;
  int32_t type;
  std::vector<std::string>  ranges;

  void __set_type(const int32_t val);

  void __set_ranges(const std::vector<std::string> & val);

  bool operator == (const PropInfo & rhs) const;
  bool operator != (const PropInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PropInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(PropInfo &a, PropInfo &b);

std::ostream& operator<<(std::ostream& out, const PropInfo& obj);

typedef struct _QueryException__isset {
  _QueryException__isset() : why(false) {}
  bool why :1;
} _QueryException__isset;

class QueryException : public ::apache::thrift::TException {
 public:

  QueryException(const QueryException&);
  QueryException& operator=(const QueryException&);
  QueryException() noexcept;

  virtual ~QueryException() noexcept;
  std::string why;

  _QueryException__isset __isset;

  void __set_why(const std::string& val);

  bool operator == (const QueryException & rhs) const;
  bool operator != (const QueryException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept override;
};

void swap(QueryException &a, QueryException &b);

std::ostream& operator<<(std::ostream& out, const QueryException& obj);

typedef struct _TupleException__isset {
  _TupleException__isset() : why(false) {}
  bool why :1;
} _TupleException__isset;

class TupleException : public ::apache::thrift::TException {
 public:

  TupleException(const TupleException&);
  TupleException& operator=(const TupleException&);
  TupleException() noexcept;

  virtual ~TupleException() noexcept;
  std::string why;

  _TupleException__isset __isset;

  void __set_why(const std::string& val);

  bool operator == (const TupleException & rhs) const;
  bool operator != (const TupleException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TupleException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept override;
};

void swap(TupleException &a, TupleException &b);

std::ostream& operator<<(std::ostream& out, const TupleException& obj);

typedef struct _WrongFormatException__isset {
  _WrongFormatException__isset() : why(false) {}
  bool why :1;
} _WrongFormatException__isset;

class WrongFormatException : public ::apache::thrift::TException {
 public:

  WrongFormatException(const WrongFormatException&);
  WrongFormatException& operator=(const WrongFormatException&);
  WrongFormatException() noexcept;

  virtual ~WrongFormatException() noexcept;
  std::string why;

  _WrongFormatException__isset __isset;

  void __set_why(const std::string& val);

  bool operator == (const WrongFormatException & rhs) const;
  bool operator != (const WrongFormatException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WrongFormatException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept override;
};

void swap(WrongFormatException &a, WrongFormatException &b);

std::ostream& operator<<(std::ostream& out, const WrongFormatException& obj);

} // namespace

#endif
