#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.21.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from hfc_db import HfcDbService
from hfc_db.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  i32 ping()')
    print('  void init(string config_path)')
    print('  void shutdown()')
    print('  bool addNamespace(string shortForm, string longForm)')
    print('  i32 insertPlain(Table t)')
    print('  QueryResult selectQuery(string query)')
    print('  string query(string query)')
    print('  bool askQuery(string query)')
    print('  i32 insert(Table t)')
    print('  i32 insertTimed(Table t, i64 timestamp)')
    print('   getMultiValue(string uri, string property)')
    print('  i32 addToMultiValue(string uri, string property, string value)')
    print('  i32 removeFromMultiValue(string uri, string property, string value)')
    print('  i32 setMultiValue(string uri, string property,  value)')
    print('  string getNewId(string nameSpace, string type)')
    print('  i32 setValue(string uri, string predicate, string value)')
    print('  string getValue(string uri, string predicate)')
    print('   getAllProps(string classuri)')
    print('  bool isSubclassOf(string superclassuri, string subclassuri)')
    print('  string getClassOf(string uri)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = HfcDbService.Client(protocol)
transport.open()

if cmd == 'ping':
    if len(args) != 0:
        print('ping requires 0 args')
        sys.exit(1)
    pp.pprint(client.ping())

elif cmd == 'init':
    if len(args) != 1:
        print('init requires 1 args')
        sys.exit(1)
    pp.pprint(client.init(args[0],))

elif cmd == 'shutdown':
    if len(args) != 0:
        print('shutdown requires 0 args')
        sys.exit(1)
    pp.pprint(client.shutdown())

elif cmd == 'addNamespace':
    if len(args) != 2:
        print('addNamespace requires 2 args')
        sys.exit(1)
    pp.pprint(client.addNamespace(args[0], args[1],))

elif cmd == 'insertPlain':
    if len(args) != 1:
        print('insertPlain requires 1 args')
        sys.exit(1)
    pp.pprint(client.insertPlain(eval(args[0]),))

elif cmd == 'selectQuery':
    if len(args) != 1:
        print('selectQuery requires 1 args')
        sys.exit(1)
    pp.pprint(client.selectQuery(args[0],))

elif cmd == 'query':
    if len(args) != 1:
        print('query requires 1 args')
        sys.exit(1)
    pp.pprint(client.query(args[0],))

elif cmd == 'askQuery':
    if len(args) != 1:
        print('askQuery requires 1 args')
        sys.exit(1)
    pp.pprint(client.askQuery(args[0],))

elif cmd == 'insert':
    if len(args) != 1:
        print('insert requires 1 args')
        sys.exit(1)
    pp.pprint(client.insert(eval(args[0]),))

elif cmd == 'insertTimed':
    if len(args) != 2:
        print('insertTimed requires 2 args')
        sys.exit(1)
    pp.pprint(client.insertTimed(eval(args[0]), eval(args[1]),))

elif cmd == 'getMultiValue':
    if len(args) != 2:
        print('getMultiValue requires 2 args')
        sys.exit(1)
    pp.pprint(client.getMultiValue(args[0], args[1],))

elif cmd == 'addToMultiValue':
    if len(args) != 3:
        print('addToMultiValue requires 3 args')
        sys.exit(1)
    pp.pprint(client.addToMultiValue(args[0], args[1], args[2],))

elif cmd == 'removeFromMultiValue':
    if len(args) != 3:
        print('removeFromMultiValue requires 3 args')
        sys.exit(1)
    pp.pprint(client.removeFromMultiValue(args[0], args[1], args[2],))

elif cmd == 'setMultiValue':
    if len(args) != 3:
        print('setMultiValue requires 3 args')
        sys.exit(1)
    pp.pprint(client.setMultiValue(args[0], args[1], eval(args[2]),))

elif cmd == 'getNewId':
    if len(args) != 2:
        print('getNewId requires 2 args')
        sys.exit(1)
    pp.pprint(client.getNewId(args[0], args[1],))

elif cmd == 'setValue':
    if len(args) != 3:
        print('setValue requires 3 args')
        sys.exit(1)
    pp.pprint(client.setValue(args[0], args[1], args[2],))

elif cmd == 'getValue':
    if len(args) != 2:
        print('getValue requires 2 args')
        sys.exit(1)
    pp.pprint(client.getValue(args[0], args[1],))

elif cmd == 'getAllProps':
    if len(args) != 1:
        print('getAllProps requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAllProps(args[0],))

elif cmd == 'isSubclassOf':
    if len(args) != 2:
        print('isSubclassOf requires 2 args')
        sys.exit(1)
    pp.pprint(client.isSubclassOf(args[0], args[1],))

elif cmd == 'getClassOf':
    if len(args) != 1:
        print('getClassOf requires 1 args')
        sys.exit(1)
    pp.pprint(client.getClassOf(args[0],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
